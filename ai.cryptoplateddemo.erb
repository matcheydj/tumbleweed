# Require the ERB library
require 'erb'

# Define a class to represent an article
class Article
  attr_accessor :title, :source, :url, :summary, :color

  def initialize(title, source, url, summary, color)
    @title = title
    @source = source
    @url = url
    @summary = summary
    @color = color
  end
end

# Create some sample articles from the web search results
articles = [
  Article.new("The 50 Best Cryptocurrency Blogs of 2023 - Detailed.com", "Detailed.com", "^1^", "The best Cryptocurrency blogs from thousands of blogs on the web and ranked by traffic, social media followers & freshness.", "green"),
  Article.new("Best Crypto Apps & Exchanges Of November 2023 – Forbes Advisor", "Forbes", "^2^", "The best crypto apps and exchanges for both new and experienced investors, based on features, fees, security, and more.", "red"),
  Article.new("16 Best Cryptocurrency Blogs 2024 – Must Read! - Cryptalker", "Cryptalker", "^3^", "A list of the 16 best crypto blogs to follow for the latest news, insights, and analysis on the cryptocurrency world.", "blue"),
  Article.new("100 Best Cryptocurrency Blogs and Websites in 2023 - Feedspot Blog", "Feedspot", "^4^", "A comprehensive list of the top cryptocurrency blogs and websites on the web, updated daily and ranked by popularity.", "yellow")
]

# Define a method to draw a horizontal line with ASCII art
def draw_line(length)
  "+" + "-" * length + "+"
end

# Define a method to draw a cell with ASCII art
def draw_cell(content, length)
  "|" + content.ljust(length) + "|"
end

# Define a method to draw a table with ASCII art
def draw_table(data, headers, length)
  # Draw the top line
  puts draw_line(length)

  # Draw the header row
  headers.each do |header|
    print draw_cell(header, length / headers.size)
  end
  puts

  # Draw the separator line
  puts draw_line(length)

  # Draw the data rows
  data.each do |row|
    row.each do |cell|
      print draw_cell(cell, length / row.size)
    end
    puts
  end

  # Draw the bottom line
  puts draw_line(length)
end

# Define a method to create a cell with SVG
def create_cell(content, x, y, width, height, color)
  # Create a rectangle element
  rect = "<rect x='#{x}' y='#{y}' width='#{width}' height='#{height}' fill='#{color}' stroke='black'/>"

  # Create a text element
  text = "<text x='#{x + width / 2}' y='#{y + height / 2}' text-anchor='middle' dominant-baseline='central' fill='white'>#{content}</text>"

  # Return the SVG elements
  rect + text
end

# Define a method to create a table with SVG
def create_table(data, headers, width, height)
  # Calculate the cell size
  cell_width = width / headers.size
  cell_height = height / (data.size + 1)

  # Create an array to store the SVG elements
  svg = []

  # Create the header cells
  headers.each_with_index do |header, i|
    svg << create_cell(header, i * cell_width, 0, cell_width, cell_height, "black")
  end

  # Create the data cells
  data.each_with_index do |row, j|
    row.each_with_index do |cell, i|
      svg << create_cell(cell, i * cell_width, (j + 1) * cell_height, cell_width, cell_height, row[-1])
    end
  end

  # Return the SVG elements as a string
  svg.join("\n")
end

# Define an ERB template to embed Ruby code in HTML
template = <<-HTML
<!DOCTYPE html>
<html>
<head>
  <title>Cryptocurrency Articles Reminder</title>
</head>
<body>
  <h1>Cryptocurrency Articles Reminder</h1>
  <p>This is an example of using ERB to embed Ruby code in HTML.</p>
  <p>The table below is generated by studying articles about cryptocurrency from sources linked to or on popular exchange blogs, including other investments, and outputting that information as an HTML table drawn in SVG vectors and ASCII art, depending on the text color.</p>
  <div id="svg-table">
    <svg width="800" height="300" xmlns="http://www.w3.org/2000/svg">
      <%= create_table(articles.map { |a| [a.title, a.source, a.url, a.summary, a.color] }, ["Title", "Source", "URL", "Summary", "Color"], 800, 300) %>
    </svg>
  </div>
  <div id="ascii-table">
    <pre>
      <%= draw_table(articles.map { |a| [a.title, a.source, a.url, a.summary, a.color] }, ["Title", "Source", "URL", "Summary", "Color"], 80) %>
    </pre>
  </div>
</body>
</html>
HTML

# Create an ERB object from the template
erb = ERB.new(template)

# Print the result of the ERB evaluation
puts erb.result
